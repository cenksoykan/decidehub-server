// <auto-generated />

using System;
using Decidehub.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Decidehub.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190922192511_Policies")]
    partial class Policies
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Decidehub.Core.Entities.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Message")
                        .IsRequired();

                    b.Property<string>("TenantId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("Decidehub.Core.Entities.Policy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Body");

                    b.Property<string>("Diff");

                    b.Property<int>("PolicyStatus");

                    b.Property<string>("TenantId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Policies");
                });

            modelBuilder.Entity("Decidehub.Core.Entities.Poll", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime>("CreateTime");

                    b.Property<DateTime>("Deadline");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("IsPublic");

                    b.Property<string>("Name");

                    b.Property<string>("OptionsJsonString");

                    b.Property<string>("QuestionBody");

                    b.Property<string>("Result");

                    b.Property<string>("TenantId")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Polls");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Poll");
                });

            modelBuilder.Entity("Decidehub.Core.Entities.PollSetting", b =>
                {
                    b.Property<long>("PollId");

                    b.Property<string>("SettingJsonString");

                    b.Property<string>("TenantId");

                    b.HasKey("PollId");

                    b.ToTable("PollSetting");
                });

            modelBuilder.Entity("Decidehub.Core.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsVisible");

                    b.Property<string>("Key");

                    b.Property<string>("TenantId");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Decidehub.Core.Entities.StripeApiInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Key");

                    b.Property<string>("Product");

                    b.Property<string>("ProductPlan");

                    b.HasKey("Id");

                    b.ToTable("StripeApiInfo");
                });

            modelBuilder.Entity("Decidehub.Core.Entities.StripeCustomer", b =>
                {
                    b.Property<string>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CardId");

                    b.Property<string>("StripeId");

                    b.Property<string>("SubscriptionId");

                    b.Property<string>("SubscriptionStatus");

                    b.Property<string>("Token");

                    b.Property<string>("UserId1");

                    b.HasKey("UserId");

                    b.HasIndex("UserId1");

                    b.ToTable("StripeCustomers");
                });

            modelBuilder.Entity("Decidehub.Core.Entities.StripeLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Quantity");

                    b.Property<decimal>("TotalAmount");

                    b.Property<int>("Type");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.ToTable("StripeLogs");
                });

            modelBuilder.Entity("Decidehub.Core.Entities.TenantTrial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("TenantId");

                    b.Property<int>("TrialDay");

                    b.Property<DateTime>("TrialStartDate");

                    b.HasKey("Id");

                    b.ToTable("TenantTrials");
                });

            modelBuilder.Entity("Decidehub.Core.Entities.UserDetail", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<decimal>("AuthorityPercent");

                    b.Property<decimal>("InitialAuthorityPercent");

                    b.Property<string>("LanguagePreference");

                    b.Property<string>("TenantId");

                    b.HasKey("UserId");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("Decidehub.Core.Entities.UserImage", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("UserImageSmallStr");

                    b.Property<string>("UserImageStr");

                    b.HasKey("UserId");

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("Decidehub.Core.Entities.Vote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("PollId");

                    b.Property<string>("TenantId");

                    b.Property<long?>("Value");

                    b.Property<DateTime>("VotedAt");

                    b.Property<string>("VotedUserId");

                    b.Property<string>("VoterId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("PollId");

                    b.HasIndex("VotedUserId");

                    b.HasIndex("VoterId");

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Decidehub.Core.Identity.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.Property<string>("TenantId");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Decidehub.Core.Identity.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("now() at time zone 'utc'");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("GeneratePassToken");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("TenantId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserImageGoogleUrl");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Decidehub.Core.Entities.AuthorityPoll", b =>
                {
                    b.HasBaseType("Decidehub.Core.Entities.Poll");

                    b.HasDiscriminator().HasValue("AuthorityPoll");
                });

            modelBuilder.Entity("Decidehub.Core.Entities.MultipleChoicePoll", b =>
                {
                    b.HasBaseType("Decidehub.Core.Entities.Poll");

                    b.HasDiscriminator().HasValue("MultipleChoicePoll");
                });

            modelBuilder.Entity("Decidehub.Core.Entities.PolicyChangePoll", b =>
                {
                    b.HasBaseType("Decidehub.Core.Entities.Poll");

                    b.Property<long?>("PolicyId");

                    b.HasIndex("PolicyId");

                    b.HasDiscriminator().HasValue("PolicyChangePoll");
                });

            modelBuilder.Entity("Decidehub.Core.Entities.SharePoll", b =>
                {
                    b.HasBaseType("Decidehub.Core.Entities.Poll");

                    b.HasDiscriminator().HasValue("SharePoll");
                });

            modelBuilder.Entity("Decidehub.Core.Entities.Contact", b =>
                {
                    b.HasOne("Decidehub.Core.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Decidehub.Core.Entities.Poll", b =>
                {
                    b.HasOne("Decidehub.Core.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Decidehub.Core.Entities.PollSetting", b =>
                {
                    b.HasOne("Decidehub.Core.Entities.Poll", "Poll")
                        .WithOne("PollSetting")
                        .HasForeignKey("Decidehub.Core.Entities.PollSetting", "PollId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Decidehub.Core.Entities.StripeCustomer", b =>
                {
                    b.HasOne("Decidehub.Core.Identity.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Decidehub.Core.Entities.UserDetail", b =>
                {
                    b.HasOne("Decidehub.Core.Identity.ApplicationUser", "User")
                        .WithOne("UserDetail")
                        .HasForeignKey("Decidehub.Core.Entities.UserDetail", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Decidehub.Core.Entities.UserImage", b =>
                {
                    b.HasOne("Decidehub.Core.Identity.ApplicationUser", "User")
                        .WithOne("UserImage")
                        .HasForeignKey("Decidehub.Core.Entities.UserImage", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Decidehub.Core.Entities.Vote", b =>
                {
                    b.HasOne("Decidehub.Core.Entities.Poll", "Poll")
                        .WithMany()
                        .HasForeignKey("PollId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Decidehub.Core.Identity.ApplicationUser", "VotedUser")
                        .WithMany()
                        .HasForeignKey("VotedUserId");

                    b.HasOne("Decidehub.Core.Identity.ApplicationUser", "Voter")
                        .WithMany()
                        .HasForeignKey("VoterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Decidehub.Core.Identity.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Decidehub.Core.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Decidehub.Core.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Decidehub.Core.Identity.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Decidehub.Core.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Decidehub.Core.Identity.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Decidehub.Core.Entities.PolicyChangePoll", b =>
                {
                    b.HasOne("Decidehub.Core.Entities.Policy", "Policy")
                        .WithMany()
                        .HasForeignKey("PolicyId");
                });
#pragma warning restore 612, 618
        }
    }
}
